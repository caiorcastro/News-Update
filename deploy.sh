#!/bin/bash
# Script de deploy autom√°tico para Google Cloud Functions
# Relat√≥rio Esportivo Artplan

echo "üöÄ DEPLOY RELAT√ìRIO ESPORTIVO ARTPLAN"
echo "======================================"

# Verificar se o Google Cloud CLI est√° instalado
if ! command -v gcloud &> /dev/null; then
    echo "‚ùå Google Cloud CLI n√£o encontrado!"
    echo "üì• Instale em: https://cloud.google.com/sdk/docs/install"
    exit 1
fi

# Configurar projeto
echo "üìã Configurando projeto Google Cloud..."
gcloud config set project peak-service-461120-h8

# Verificar se os arquivos necess√°rios existem
required_files=("main.py" "sports_reporter.py" "requirements.txt" "env.yaml")

for file in "${required_files[@]}"; do
    if [ ! -f "$file" ]; then
        echo "‚ùå Arquivo obrigat√≥rio n√£o encontrado: $file"
        exit 1
    fi
done

echo "‚úÖ Todos os arquivos encontrados!"

# Verificar se o App Password foi configurado
if grep -q "COLOQUE_APP_PASSWORD_AQUI" env.yaml; then
    echo "‚ö†Ô∏è  ATEN√á√ÉO: App Password n√£o configurado!"
    echo "üìß Configure o App Password do Gmail no arquivo env.yaml"
    echo "üîó Tutorial: https://support.google.com/accounts/answer/185833"
    
    read -p "ü§î Continuar mesmo assim? (s/n): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Ss]$ ]]; then
        echo "‚èπÔ∏è  Deploy cancelado"
        exit 1
    fi
fi

# Habilitar APIs necess√°rias
echo "üîß Habilitando APIs do Google Cloud..."
gcloud services enable cloudfunctions.googleapis.com
gcloud services enable cloudscheduler.googleapis.com

# Deploy da Cloud Function
echo "‚òÅÔ∏è  Fazendo deploy da Cloud Function..."
gcloud functions deploy daily-sports-report \
    --runtime python311 \
    --trigger-http \
    --entry-point daily_sports_report \
    --env-vars-file env.yaml \
    --memory 256MB \
    --timeout 300s \
    --region us-central1 \
    --allow-unauthenticated

if [ $? -eq 0 ]; then
    echo "‚úÖ Cloud Function deploy conclu√≠do!"
    
    # Obter URL da fun√ß√£o
    FUNCTION_URL=$(gcloud functions describe daily-sports-report --region=us-central1 --format="value(httpsTrigger.url)")
    echo "üîó URL da fun√ß√£o: $FUNCTION_URL"
    
    # Configurar agendamento (Cloud Scheduler)
    echo "‚è∞ Configurando agendamento di√°rio..."
    
    # Verificar se j√° existe o job
    if gcloud scheduler jobs describe daily-sports-artplan --location=us-central1 &> /dev/null; then
        echo "üìÖ Job do scheduler j√° existe, atualizando..."
        gcloud scheduler jobs update http daily-sports-artplan \
            --location=us-central1 \
            --schedule="0 8 * * *" \
            --uri="$FUNCTION_URL" \
            --time-zone="America/Sao_Paulo"
    else
        echo "üìÖ Criando novo job do scheduler..."
        gcloud scheduler jobs create http daily-sports-artplan \
            --location=us-central1 \
            --schedule="0 8 * * *" \
            --uri="$FUNCTION_URL" \
            --time-zone="America/Sao_Paulo" \
            --description="Relat√≥rio esportivo di√°rio Artplan"
    fi
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Agendamento configurado!"
        echo ""
        echo "üéâ DEPLOY CONCLU√çDO COM SUCESSO!"
        echo "================================"
        echo "üìß Emails ser√£o enviados todos os dias √†s 08:00 (hor√°rio de Bras√≠lia)"
        echo "üì¨ Destinat√°rios: caio.castro@artplan.com.br, analytics.artplan@gmail.com"
        echo ""
        echo "üîß COMANDOS √öTEIS:"
        echo "‚Ä¢ Testar manualmente: curl '$FUNCTION_URL'"
        echo "‚Ä¢ Ver logs: gcloud functions logs read daily-sports-report"
        echo "‚Ä¢ Ver agendamentos: gcloud scheduler jobs list"
        echo ""
        echo "üîó Monitoramento:"
        echo "‚Ä¢ Cloud Functions: https://console.cloud.google.com/functions"
        echo "‚Ä¢ Cloud Scheduler: https://console.cloud.google.com/cloudscheduler"
    else
        echo "‚ö†Ô∏è  Fun√ß√£o deployada, mas erro no agendamento"
    fi
    
else
    echo "‚ùå Erro no deploy da Cloud Function"
    exit 1
fi

echo ""
echo "‚ú® Deploy finalizado!" 